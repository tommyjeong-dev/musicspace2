// js/admin-dashboard.js

document.addEventListener('DOMContentLoaded', () => {
    // --- 1. Ï†ÑÏó≠ Î≥ÄÏàò ---
    let genreChart = null;
    let userChart = null;

    // --- 2. ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Í¥ÄÎ†® Ìï®Ïàò ---
    
    /** ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏ */
    async function checkAuthStatus() {
        try {
            const response = await fetch('/api/user', {
                credentials: 'include'
            });
            
            if (response.ok) {
                const data = await response.json();
                console.log('Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú:', data.user.username, 'Í¥ÄÎ¶¨Ïûê:', data.user.isAdmin);
                
                // Í¥ÄÎ¶¨ÏûêÍ∞Ä ÏïÑÎãàÎ©¥ Ï†ëÍ∑º Í±∞Î∂Ä
                if (!data.user.isAdmin) {
                    alert('Í¥ÄÎ¶¨Ïûê Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
                    window.location.href = '/index.html';
                    return;
                }
                
                // Î°úÍ∑∏Ïù∏Îêú ÏÉÅÌÉú - ÏÉÅÎã® ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏòÅÏó≠ ÌëúÏãú
                const userInfoEl = document.getElementById('user-info');
                const usernameEl = document.getElementById('username');
                if (userInfoEl && usernameEl) {
                    userInfoEl.style.display = 'flex';
                    usernameEl.textContent = data.user.username;
                }
                
            } else {
                console.log('Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùÄ ÏÉÅÌÉú');
                alert('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
                window.location.href = '/login.html';
            }
        } catch (error) {
            console.error('Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏ Ïò§Î•ò:', error);
            alert('Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
            window.location.href = '/login.html';
        }
    }

    /** Î°úÍ∑∏ÏïÑÏõÉ Í∏∞Îä• */
    async function logout() {
        try {
            const response = await fetch('/api/logout', {
                method: 'POST',
                credentials: 'include'
            });
            
            if (response.ok) {
                console.log('Î°úÍ∑∏ÏïÑÏõÉ ÏÑ±Í≥µ');
                window.location.href = '/login.html';
            } else {
                console.error('Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìå®');
            }
        } catch (error) {
            console.error('Î°úÍ∑∏ÏïÑÏõÉ Ïò§Î•ò:', error);
        }
    }

    // --- 3. ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞ Î°úÎî© ---

    /** ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞ Î°úÎî© */
    async function loadDashboardData() {
        try {
            const response = await fetch('/api/admin/dashboard', {
                credentials: 'include'
            });
            
            if (response.status === 401) {
                alert('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§. Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.');
                window.location.href = '/login.html';
                return;
            }
            
            if (response.status === 403) {
                alert('Í¥ÄÎ¶¨Ïûê Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
                window.location.href = '/index.html';
                return;
            }
            
            if (!response.ok) {
                throw new Error('ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïã§Ìå®');
            }
            
            const data = await response.json();
            console.log('ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞:', data);
            
            // ÌÜµÍ≥Ñ Ïπ¥Îìú ÏóÖÎç∞Ïù¥Ìä∏
            updateStatsCards(data.overview);
            
            // Ï∞®Ìä∏ ÏÉùÏÑ±
            createGenreChart(data.genreStats);
            createUserChart(data.userStats);
            
            // ÏµúÍ∑º ÌôúÎèô ÏóÖÎç∞Ïù¥Ìä∏
            updateRecentActivity(data.recentSongs);
            
        } catch (error) {
            console.error('ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïò§Î•ò:', error);
            showError('ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        }
    }

    /** ÌÜµÍ≥Ñ Ïπ¥Îìú ÏóÖÎç∞Ïù¥Ìä∏ */
    function updateStatsCards(overview) {
        document.getElementById('total-users').textContent = overview.totalUsers;
        document.getElementById('total-songs').textContent = overview.totalSongs;
        document.getElementById('total-playlists').textContent = overview.totalPlaylists;
        document.getElementById('public-songs').textContent = overview.publicSongs;
    }

    /** Ïû•Î•¥ Ï∞®Ìä∏ ÏÉùÏÑ± */
    function createGenreChart(genreStats) {
        const ctx = document.getElementById('genre-chart').getContext('2d');
        
        // Í∏∞Ï°¥ Ï∞®Ìä∏Í∞Ä ÏûàÏúºÎ©¥ Ï†úÍ±∞
        if (genreChart) {
            genreChart.destroy();
        }
        
        const colors = [
            '#3498db', '#e74c3c', '#2ecc71', '#f39c12', 
            '#9b59b6', '#1abc9c', '#34495e', '#e67e22'
        ];
        
        genreChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: genreStats.map(stat => stat.genre),
                datasets: [{
                    data: genreStats.map(stat => stat.count),
                    backgroundColor: colors.slice(0, genreStats.length),
                    borderColor: '#2c2c2c',
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        labels: {
                            color: '#e8f4fd'
                        }
                    }
                }
            }
        });
    }

    /** ÏÇ¨Ïö©Ïûê ÌôúÎèô Ï∞®Ìä∏ ÏÉùÏÑ± */
    function createUserChart(userStats) {
        const ctx = document.getElementById('user-chart').getContext('2d');
        
        // Í∏∞Ï°¥ Ï∞®Ìä∏Í∞Ä ÏûàÏúºÎ©¥ Ï†úÍ±∞
        if (userChart) {
            userChart.destroy();
        }
        
        // ÏÉÅÏúÑ 5Î™ÖÎßå ÌëúÏãú
        const topUsers = userStats.slice(0, 5);
        
        userChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: topUsers.map(user => user.username),
                datasets: [{
                    label: 'Songs Uploaded',
                    data: topUsers.map(user => user.songCount),
                    backgroundColor: 'rgba(52, 152, 219, 0.8)',
                    borderColor: '#3498db',
                    borderWidth: 2,
                    borderRadius: 8,
                    borderSkipped: false
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        labels: {
                            color: '#e8f4fd'
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            color: '#e8f4fd'
                        },
                        grid: {
                            color: '#555'
                        }
                    },
                    x: {
                        ticks: {
                            color: '#e8f4fd'
                        },
                        grid: {
                            color: '#555'
                        }
                    }
                }
            }
        });
    }

    /** ÏµúÍ∑º ÌôúÎèô ÏóÖÎç∞Ïù¥Ìä∏ */
    function updateRecentActivity(recentSongs) {
        const activityList = document.getElementById('recent-songs-list');
        
        if (recentSongs.length === 0) {
            activityList.innerHTML = `
                <div class="empty-state">
                    <h4>No Recent Activity</h4>
                    <p>No songs have been uploaded recently.</p>
                </div>
            `;
            return;
        }
        
        activityList.innerHTML = '';
        recentSongs.forEach(song => {
            const activityItem = document.createElement('div');
            activityItem.className = 'activity-item';
            
            const timeAgo = getTimeAgo(new Date(song.createdAt));
            
            activityItem.innerHTML = `
                <div class="activity-icon">üéµ</div>
                <div class="activity-content">
                    <div class="activity-title">${song.title}</div>
                    <div class="activity-meta">
                        <span>Artist: ${song.artist || 'N/A'}</span>
                        <span>Genre: ${song.genre || 'N/A'}</span>
                        <span>Uploader: ${song.uploader}</span>
                        <span class="activity-badge ${song.isPublic ? 'public' : 'private'}">
                            ${song.isPublic ? 'Public' : 'Private'}
                        </span>
                    </div>
                </div>
                <div class="activity-time">${timeAgo}</div>
            `;
            
            activityList.appendChild(activityItem);
        });
    }

    /** ÏãúÍ∞Ñ Í≤ΩÍ≥º Í≥ÑÏÇ∞ */
    function getTimeAgo(date) {
        const now = new Date();
        const diffInSeconds = Math.floor((now - date) / 1000);
        
        if (diffInSeconds < 60) {
            return 'Just now';
        } else if (diffInSeconds < 3600) {
            const minutes = Math.floor(diffInSeconds / 60);
            return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
        } else if (diffInSeconds < 86400) {
            const hours = Math.floor(diffInSeconds / 3600);
            return `${hours} hour${hours > 1 ? 's' : ''} ago`;
        } else {
            const days = Math.floor(diffInSeconds / 86400);
            return `${days} day${days > 1 ? 's' : ''} ago`;
        }
    }

    /** ÏóêÎü¨ ÌëúÏãú */
    function showError(message) {
        const container = document.querySelector('.container');
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message';
        errorDiv.style.cssText = `
            background: #e74c3c;
            color: white;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
            text-align: center;
        `;
        errorDiv.textContent = message;
        container.insertBefore(errorDiv, container.firstChild);
        
        // 5Ï¥à ÌõÑ ÏóêÎü¨ Î©îÏãúÏßÄ Ï†úÍ±∞
        setTimeout(() => {
            if (errorDiv.parentNode) {
                errorDiv.parentNode.removeChild(errorDiv);
            }
        }, 5000);
    }

    // --- 4. Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ---

    /** Î°úÍ∑∏ÏïÑÏõÉ Î≤ÑÌäº Ïù¥Î≤§Ìä∏ */
    const logoutBtn = document.getElementById('logout-btn');
    if (logoutBtn) {
        logoutBtn.addEventListener('click', logout);
    }

    /** Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ® Î≤ÑÌäº Ïù¥Î≤§Ìä∏ */
    const refreshBtn = document.getElementById('refresh-data-btn');
    if (refreshBtn) {
        refreshBtn.addEventListener('click', () => {
            refreshBtn.innerHTML = `
                <div class="action-icon">‚è≥</div>
                <div class="action-text">Refreshing...</div>
            `;
            refreshBtn.disabled = true;
            
            loadDashboardData().finally(() => {
                refreshBtn.innerHTML = `
                    <div class="action-icon">üîÑ</div>
                    <div class="action-text">Refresh Data</div>
                `;
                refreshBtn.disabled = false;
            });
        });
    }

    // --- 5. Ï¥àÍ∏∞ Ïã§Ìñâ ---
    checkAuthStatus();
    loadDashboardData();
});
